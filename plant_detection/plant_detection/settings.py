"""
Django settings for plant_detection project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-f+zim%y#$_+a$em=&ex=p83u10b#xrf6820cd6p4%bffn01cv$"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = [
    'togetherso.onrender.com',
    'localhost',
    '127.0.0.1'
]

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "backend",
     'accounts',
     'crispy_forms',
    'crispy_bootstrap5',
    'widget_tweaks', 
    'django.contrib.humanize',

    # "axes",
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    # "axes.middleware.AxesMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'backend.middleware.SessionTimeoutMiddleware',  # Add your middleware here
    'whitenoise.middleware.WhiteNoiseMiddleware', 
]

ROOT_URLCONF = "plant_detection.urls"

SESSION_COOKIE_AGE = 1800  # 30 minutes in seconds
SESSION_SAVE_EVERY_REQUEST = True  # Reset timeout on each request
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Clear session when browser closes

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        'DIRS': [os.path.join(BASE_DIR, 'templates')], 
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "plant_detection.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  # Use PostgreSQL backend
        'NAME': os.getenv('DB_NAME', 'TogetherSO'),  # Database name
        'USER': os.getenv('DB_USER', 'manga'),       # Database user
        'PASSWORD': os.getenv('DB_PASSWORD', 'Seuphro44#'),  # Database password
        'HOST': os.getenv('DB_HOST', 'localhost'),   # Database host
        'PORT': os.getenv('DB_PORT', '5432'),        # Database port
    }
}
# import dj_database_url
# # Remove hardcoded credentials
# DATABASES = {
#     'default': dj_database_url.config(
#         default=os.getenv('DATABASE_URL'),  # Render automatically provides this
#         conn_max_age=600,
#         # ssl_require=True  # Essential for production
#     )
# }


# Email Backend
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.sendgrid.net'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'apikey'  # SendGrid API key as username
EMAIL_HOST_PASSWORD = os.getenv('SENDGRID_API_KEY')  # SendGrid API key as password

# The email you'll be sending emails from
DEFAULT_FROM_EMAIL = os.getenv('FROM_EMAIL', default='noreply@gmail.com')
LOGIN_REDIRECT_URL = 'success'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ]
}

# AUTHENTICATION_BACKENDS = [
#     'axes.backends.AxesStandaloneBackend',  
#     'django.contrib.auth.backends.ModelBackend',
# ]

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/


# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # This is crucial
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
    os.path.join(BASE_DIR, 'accounts/static'),
    os.path.join(BASE_DIR, 'backend/static'),
]
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# DigitalOcean Spaces Configuration
DO_SPACES_ACCESS_KEY_ID = os.getenv('DO_SPACES_ACCESS_KEY_ID')  # Set this in Render environment variables
DO_SPACES_SECRET_ACCESS_KEY = os.getenv('DO_SPACES_SECRET_ACCESS_KEY')  # Set this in Render environment variables
DO_SPACES_BUCKET_NAME = 'togethersomedia'  # Replace with your bucket name
DO_SPACES_REGION_NAME = 'nyc3'  # Replace with your region (e.g., nyc3)
DO_SPACES_ENDPOINT_URL = f'https://{DO_SPACES_REGION_NAME}.digitaloceanspaces.com'  # Region-specific endpoint
DO_SPACES_CUSTOM_DOMAIN = f'{DO_SPACES_BUCKET_NAME}.{DO_SPACES_REGION_NAME}.cdn.digitaloceanspaces.com'

# Media Files
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
MEDIA_URL = f"https://{DO_SPACES_CUSTOM_DOMAIN}/"
AWS_S3_ENDPOINT_URL = DO_SPACES_ENDPOINT_URL
AWS_ACCESS_KEY_ID = DO_SPACES_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY = DO_SPACES_SECRET_ACCESS_KEY
AWS_STORAGE_BUCKET_NAME = DO_SPACES_BUCKET_NAME
AWS_S3_CUSTOM_DOMAIN = DO_SPACES_CUSTOM_DOMAIN
AWS_DEFAULT_ACL = 'public-read'  # Ensure files are publicly readable
AWS_QUERYSTRING_AUTH = False  # Disable query string authentication for public files

# Ensure sessions expire when the browser is closed
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Optional: Use secure cookies for HTTPS
# SESSION_COOKIE_SECURE = True  # Set to True in production with HTTPS

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

LOGIN_URL = 'login'  # Name of the login URL
LOGOUT_REDIRECT_URL = 'welcome'  # Redirect after logout
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

DATABASES['default']['CONN_MAX_AGE'] = 300 

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

TIME_ZONE = 'Africa/Kigali'  # Rwanda timezone
USE_TZ = True

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
}
